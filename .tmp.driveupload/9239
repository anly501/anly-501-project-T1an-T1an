{
 "cells": [
  {
   "cell_type": "raw",
   "id": "50037079",
   "metadata": {},
   "source": [
    "---\n",
    "title: 'Data Gathering '\n",
    "format:\n",
    "  html:\n",
    "    code-fold: true\n",
    "    smooth-scroll: true\n",
    "    theme:\n",
    "      light: cosmo\n",
    "      dark: darkly\n",
    "execute:\n",
    "  echo: false\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f185e344",
   "metadata": {},
   "source": [
    "## Text Data: Naive-Bayes Python:\n",
    "\n",
    "### About Twitter Dataset\n",
    "\n",
    "#### Code\n",
    "\n",
    "Code for Naïve Bayes (NB) in Python with Labeled Text Data [Code for Naïve Bayes (NB) in Python with Labeled Text Data](https://github.com/anly501/anly-501-project-T1an-T1an/tree/main/codes/04-naive-bayes)\n",
    "\n",
    "#### Context\n",
    "It is important for sentiment analysis of tweets. Text data is unstructured data. Unlike structured data, one cannot immediately get preliminary information from unstructured data. Sentiment analysis of tweets can be used to initially determine the user's evaluation of a particular thing.\n",
    "\n",
    "Sentiment analysis, sometimes referred to as opinion mining, is a technique used in natural language processing (NLP) to determine if data is positive, negative, or neutral. Sentiment analysis on text data is popular among companies to monitor how their brands and products are perceived by consumers through online reviews and to better understand their target market and target population.\n",
    "\n",
    "Sentiment analysis is first performed on clean data. By using textblob package to analyze each twitter. And remove all unwanted data such as emoticons, punctuation, etc.\n",
    "The stopwords are also removed.\n",
    "Data tokenization is also conducted.\n",
    "The number of token occurrences in each document is counted.\n",
    "The figure below shows the distribution of positive and negative words.\n",
    "\n",
    "#### Code and Methodology"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c888f4bb",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "import re\n",
    "import time\n",
    "import string\n",
    "import warnings\n",
    "import nltk\n",
    "\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.stem.porter import *\n",
    "from nltk.classify import NaiveBayesClassifier\n",
    "from wordcloud import WordCloud\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import f1_score, confusion_matrix, accuracy_score\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# To mock web-browser and scrap tweets\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "\n",
    "# To consume Twitter's API\n",
    "import tweepy\n",
    "from tweepy import OAuthHandler \n",
    "\n",
    "# To identify the sentiment of text\n",
    "from textblob import TextBlob\n",
    "from textblob.sentiments import NaiveBayesAnalyzer\n",
    "from textblob.np_extractors import ConllExtractor\n",
    "\n",
    "import os\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import numpy as np\n",
    "import json\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "from nltk.corpus import stopwords#python -m nltk.downloader stopwords\n",
    "import string\n",
    "\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from  nltk.stem import SnowballStemmer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import classification_report\n",
    "nltk.download('omw-1.4', quiet=True)\n",
    "# ignoring all the warnings\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "# downloading stopwords corpus\n",
    "nltk.download('stopwords', quiet=True)\n",
    "nltk.download('wordnet', quiet=True)\n",
    "nltk.download('vader_lexicon', quiet=True)\n",
    "nltk.download('averaged_perceptron_tagger', quiet=True)\n",
    "nltk.download('movie_reviews', quiet=True)\n",
    "nltk.download('punkt', quiet=True)\n",
    "nltk.download('conll2000', quiet=True)\n",
    "nltk.download('brown', quiet=True)\n",
    "stopwords = set(stopwords.words(\"english\"))\n",
    "\n",
    "tweets_df=pd.read_csv('../../data/01-modified-data/twitter_text_data.csv')\n",
    "tweets_df=tweets_df.rename(columns = {'text':'tweets'})\n",
    "#tweets_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef0acf2c",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "def fetch_sentiment_using_textblob(text):\n",
    "    analysis = TextBlob(text)\n",
    "    return 'pos' if analysis.sentiment.polarity >= 0 else 'neg'\n",
    "\n",
    "sentiments_using_textblob = tweets_df.tweets.apply(lambda tweet: fetch_sentiment_using_textblob(tweet))\n",
    "pd.DataFrame(sentiments_using_textblob.value_counts())\n",
    "tweets_df['attitude'] = sentiments_using_textblob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d4fa06e6",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "#data cleaning \n",
    "def remove_pattern(text, pattern_regex):\n",
    "    r = re.findall(pattern_regex, text)\n",
    "    for i in r:\n",
    "        text = re.sub(i, '', text)\n",
    "    \n",
    "    return text "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9bea8d52",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "tweets_df['clean_tweets'] = np.vectorize(remove_pattern)(tweets_df['tweets'], \"@[\\w]*: | *RT*\")\n",
    "tweets_df['final_tweets'] = tweets_df['clean_tweets'].str.replace(\"[^a-zA-Z# ]\", \"\")\n",
    "stopwords_set = set(stopwords)\n",
    "cleaned_tweets = []\n",
    "\n",
    "\n",
    "for index, row in tweets_df.iterrows():\n",
    "    \n",
    "    words_without_stopwords = [word for word in row.final_tweets.split() if not word in stopwords_set and '#' not in word.lower()]\n",
    "    \n",
    "    cleaned_tweets.append(' '.join(words_without_stopwords))\n",
    "    \n",
    "tweets_df['final_tweets'] = cleaned_tweets\n",
    "tokenized_tweet = tweets_df['final_tweets'].apply(lambda x: x.split())\n",
    "word_lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "tokenized_tweet = tokenized_tweet.apply(lambda x: [word_lemmatizer.lemmatize(i) for i in x])\n",
    "for i, tokens in enumerate(tokenized_tweet):\n",
    "    tokenized_tweet[i] = ' '.join(tokens)\n",
    "\n",
    "tweets_df['final_tweets'] = tokenized_tweet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4e9b9b2c",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [],
   "source": [
    "cleaned_tweets = []\n",
    "\n",
    "for index, row in tweets_df.iterrows():\n",
    "    # Here we are filtering out all the words that contains link\n",
    "    words_without_links = [word for word in row.final_tweets.split() if 'http' not in word]\n",
    "    cleaned_tweets.append(' '.join(words_without_links))\n",
    "\n",
    "tweets_df['final_tweets'] = cleaned_tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fig-1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Attitude histogram')]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 672x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 442,
       "width": 593
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: true\n",
    "#| label: fig-1\n",
    "#| fig-cap: histogram of Twitter Text Data\n",
    "sns.countplot(tweets_df['attitude'],label='Count').set(title='Attitude histogram')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19a5ce38",
   "metadata": {},
   "source": [
    "The figure-1 shows that the majority of tweets have a positive attitude towards cryptocurrencies, even though the overall price of cryptocurrencies is on a downward trend and there is instability in it.\n",
    "\n",
    "The tweets marked with a positive attitude are marked as 0 and those marked with a negative attitude are marked as 1. In this way, Labeled Text Data is obtained.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c6708513",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_df['label']=np.where(tweets_df['attitude']=='pos',0,1)\n",
    "#tweets_df.to_csv (r'..//../data/01-modified-data/cleaned_twitter.csv', index = False, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1561ee7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer()\n",
    "X = vectorizer.fit_transform(tweets_df['final_tweets'])\n",
    "X=X.toarray()\n",
    "y=tweets_df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a6fa3bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#seperate dataset to train and test data\n",
    "import random\n",
    "x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=66)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dedabf02",
   "metadata": {},
   "outputs": [],
   "source": [
    "#separate data two training data and test data\n",
    "import random\n",
    "x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=66)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "521d4411",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[133,  39],\n",
       "       [  8,  26]])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = MultinomialNB()\n",
    "model.fit(x_train, y_train)\n",
    "yp_test=model.predict(x_test)\n",
    "cm_matrix=confusion_matrix(y_test,yp_test)\n",
    "cm_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fig-2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score - 0.7718446601941747\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x960 with 2 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 755,
       "width": 856
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: true\n",
    "#| label: fig-2\n",
    "#| fig-cap: Heatmap Result of Text Data\n",
    "print(f'Accuracy Score - {accuracy_score(y_test, yp_test)}')\n",
    "f, ax1 = plt.subplots(figsize = (12, 10))\n",
    "ax1=sns.heatmap(cm_matrix,cmap=\"RdBu\",annot=True,square=True,cbar_kws={'shrink': 0.6})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "tab-1",
   "metadata": {
    "tab-cap": "Accuracy Result Table"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.77      0.85       172\n",
      "           1       0.40      0.76      0.53        34\n",
      "\n",
      "    accuracy                           0.77       206\n",
      "   macro avg       0.67      0.77      0.69       206\n",
      "weighted avg       0.85      0.77      0.80       206\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#| echo: true\n",
    "#| label: tab-1\n",
    "print(classification_report(y_test,yp_test))\n",
    "#report_summ = classification_report(y_test,yp_test)\n",
    "#report_summ = pd.DataFrame(report_summ)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6420be0",
   "metadata": {},
   "source": [
    "From the structure of the FTX web page, it is very difficult for users to get market data in exchange. Because FTX is an exchange with keep moving real-time prices, the prices of all coins are presented in a bar. Unlike yahoo finance, which gives users the option to access historical market data on the web page. The most convenient option for users to get FTX's API data is to grab market data automatically.\n",
    "\n",
    "Obtaining FTX data by API is a method that allows us to automatically trade cryptocurrencies on FTX via code. The price data can be obtained by calling the required REST API endpoint. Import the request package using python, enter the relevant URL according to the official API doc instructions, and set the start timestamp and end timestamp. By rewriting the desired market name, get the new path url, and finally get a file composed of json. The file contains information about a particular currency on the FTX exchange. The data is then arranged in a pandas packages data framework to better observe and understand the data. I also used the same approach to get market information for spots and swaps.\n",
    "\n",
    "#### Contents\n",
    "The dataset has one CSV files (7 columns and 3000+ rows)\n",
    "\n",
    "* raw_data_ftxprop_market_data.csv\n",
    "  + startTime: (date)\n",
    "  + open: (Price of the currency at 0:00 UTC each day)\n",
    "  + high: (Maximum price within 24 hours of UTC time per day)\n",
    "  + low: (Lowest price within 24 hours of UTC time per day)\n",
    "  + close: (Price of the currency at 23:59 UTC each day)\n",
    "  + volume: (Trading volume within 24 hours per day at UTC time)\n",
    "  + coin pair:\n",
    "    - AVAX/USD\n",
    "    - BTC/USD\n",
    "    - DAI/USD\n",
    "    - DOGE/USD\n",
    "    - DOT/USD\n",
    "    - ETH/USD\n",
    "    - LINK/USD\n",
    "    - SOL/USD\n",
    "    - UNI/USD\n",
    "    - XRP/USD\n",
    "\n",
    "* Data includes:\n",
    "  + Timestamp from Sep 2021- Sep 2022\n",
    "  + 3439 price data\n",
    "  + 10 spot pairs\n",
    "\n",
    "\n",
    "#### Review Dataset\n",
    "\n",
    "**FTX DATASET**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "tbl-1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>startTime</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>exchange</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-09-01T00:00:00+00:00</td>\n",
       "      <td>47121.000</td>\n",
       "      <td>49131.000</td>\n",
       "      <td>46521.000</td>\n",
       "      <td>48846.000</td>\n",
       "      <td>484495675.810</td>\n",
       "      <td>BTC/USD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-09-02T00:00:00+00:00</td>\n",
       "      <td>48846.000</td>\n",
       "      <td>50407.000</td>\n",
       "      <td>48623.000</td>\n",
       "      <td>49273.000</td>\n",
       "      <td>602599224.708</td>\n",
       "      <td>BTC/USD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-09-03T00:00:00+00:00</td>\n",
       "      <td>49273.000</td>\n",
       "      <td>51083.000</td>\n",
       "      <td>48340.000</td>\n",
       "      <td>50024.000</td>\n",
       "      <td>781215394.637</td>\n",
       "      <td>BTC/USD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-09-04T00:00:00+00:00</td>\n",
       "      <td>50025.000</td>\n",
       "      <td>50564.000</td>\n",
       "      <td>49387.000</td>\n",
       "      <td>49936.000</td>\n",
       "      <td>360255343.979</td>\n",
       "      <td>BTC/USD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-09-05T00:00:00+00:00</td>\n",
       "      <td>49936.000</td>\n",
       "      <td>51928.000</td>\n",
       "      <td>49463.000</td>\n",
       "      <td>51807.000</td>\n",
       "      <td>435352720.465</td>\n",
       "      <td>BTC/USD</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   startTime      open      high       low     close  \\\n",
       "0  2021-09-01T00:00:00+00:00 47121.000 49131.000 46521.000 48846.000   \n",
       "1  2021-09-02T00:00:00+00:00 48846.000 50407.000 48623.000 49273.000   \n",
       "2  2021-09-03T00:00:00+00:00 49273.000 51083.000 48340.000 50024.000   \n",
       "3  2021-09-04T00:00:00+00:00 50025.000 50564.000 49387.000 49936.000   \n",
       "4  2021-09-05T00:00:00+00:00 49936.000 51928.000 49463.000 51807.000   \n",
       "\n",
       "         volume exchange  \n",
       "0 484495675.810  BTC/USD  \n",
       "1 602599224.708  BTC/USD  \n",
       "2 781215394.637  BTC/USD  \n",
       "3 360255343.979  BTC/USD  \n",
       "4 435352720.465  BTC/USD  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| echo: true\n",
    "#| label: tbl-1\n",
    "#| tbl-cap: FTX Raw Dataset\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "pd.set_option('display.float_format',lambda x: '%.3f' % x)\n",
    "\n",
    "ftx=pd.read_csv('../../data/00-raw-data/raw_data_ftxprop_market_data.csv')\n",
    "ftx=ftx.drop(['time'],axis=1)\n",
    "ftx.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48fe7b23",
   "metadata": {},
   "source": [
    "Because the current FTX has filed for bankruptcy in November, a week after the website was hacked. So FTX exchange linked may contain a Trojan horse virus of fraud information. To avoid the potential danger, I used the Huobi exchange BTC/USDT instead of the previous web links.\n",
    "\n",
    "To learn more about original data of BTC price from FTX exchange, please see [BTC price from Huobi exchange](https://futures.huobi.com/en-us/linear_swap/exchange/#contract_code=BTC-USDT&contract_type=swap&type=cross) instead. \n",
    "\n",
    "#### Inspiration\n",
    "* What is the difference between the highest and lowest price of the currency within one year?\n",
    "\n",
    "* Do price changes on the day have an impact on trading volume?\n",
    "\n",
    "* Is it possible to predict future price trends from prices over time?\n",
    "\n",
    "## Data from R API : Twitter\n",
    "\n",
    "### About Twitter Dataset\n",
    "\n",
    "#### Context\n",
    "\n",
    "This dataset consists of many comments about cryptocurrency obtained from Twitter's API. These data were obtained on September 5, 2022, and the dataset includes the content of users' comments on the search topic, retweeted comments, and the number of retweets and likes. It also contains data such as the latitude and longitude of the users when sending the message, and the user's name.\n",
    "\n",
    "#### Code and Methodology\n",
    "\n",
    "Use R to connect to a Twitter user query endpoint using JSON returned from the Twitter API.\n",
    "With the user query endpoint, Twitter allows the ability to use user objects to determine the correlation between the number of a person's followers and the sentiment score of their bio. Twitter allows the use of user objects to determine the correlation between the number of a person's followers and the sentiment score of their biography. User objects can also be used to map a group of accounts based on their publicly listed position in the account profile. First, a developer account needs to be registered before getting the Twitter data. After that create a project and use it to generate the credentials required to use the Twitter API.\n",
    "\n",
    "After getting the consumerKey, consumerSecret, Bearer_Token, access_Token, access_Secret. Use R to import ggplot2, lubridate, tidyverse, quantmod, selectr, xml2, rtweet, wordcloud2, tm, dplyr, twitteR, ROAuth, jsonlite,writexl\n",
    "\n",
    "Get a link to Twitter through `setup_twitter_oauth`, then use `twitteR::searchTwitter` to enter the desired search terms, get the number of entries and the date the tweet was posted, and export to xlsx format, which is the raw data from twitter.\n",
    "\n",
    "### Contents\n",
    "\n",
    "The dataset has one CSV files (15 columns and 1000 rows)\n",
    "\n",
    "* rawdata_twitter.csv\n",
    "  + text(User Comments)\t\t\t\t\t\t\t\t\t\t\t\n",
    "  + favorited (Whether this status has been favorited)\n",
    "  + favoriteCount(Number of times this tweet was favorite)\n",
    "  + replyToSN (Screen name of the user this is in reply to)\n",
    "  + created (When this status was created)\n",
    "  + truncated (Whether this status was truncated)\n",
    "  + replyToSID (ID of the user this was in reply to)\n",
    "  + id (ID of this status)\n",
    "  + statusSource\n",
    "  + screenName (Screen name of the user who posted this status)\n",
    "  + retweetCount(The number of times this status has been retweeted)\n",
    "  + isRetweet (Whether this status was Retweet)\n",
    "  + retweeted (TRUE if this status has been retweeted)\n",
    "  + longitude (The longitude  of the status)\n",
    "  + latitude (The latitude  of the status)\n",
    "*Source from twitteR (version 1.1.9)*\n",
    "\n",
    "* Data includes:\n",
    "  + Timestamp from 2022-09-05\n",
    "  + 1000 data\n",
    "\n",
    "\n",
    "\n",
    "### Review Dataset\n",
    "\n",
    "**Twitter DATASET**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f760d4",
   "metadata": {},
   "source": [
    "By observing the obtained Twitter data, most of the columns in the raw data is not helpful for sentiment analysis. Only the first column of text data should be kept.When using R to output a csv file of tweet data, it always reports an error for reading the csv directly using python due to the special nature of tweet data. Because 'utf-8' codec can't decode byte , JSON files are more suitable for data cleaning and sentiment analysis afterwards than csv files. However, after obtaining the data, JSON format is more difficult to perform preliminary data observation compared to csv format. So in the data cleaning interface afterwards, JSON files will be used directly for the next data processing step. \n",
    "\n",
    "To learn more about Twitter dataset see [Key words related to ETH](https://github.com/anly501/anly-501-project-T1an-T1an/tree/main/data/00-raw-data)\n",
    "\n",
    "#### Inspiration\n",
    "* Is the public's sentiment about the topic positive or negative?\n",
    "\n",
    "* How to clean out irrelevant text information？\n",
    "\n",
    "* Is it possible to predict future topic trends?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
